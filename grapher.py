# -*- coding: utf-8 -*-import jsonimport urllib2import timeimport getpassimport sysmax_user_commit=1max_file_commit=1if len(sys.argv)<4:	print "Error: expected at least 3 arguments, "+str(len(sys.argv)-1)+" given\nusage:\n      python "+sys.argv[0]+"  login(you)  user  repositoryOfUser  [directory]\n"	quit()t0 = time.time()u=sys.argv[1]org=sys.argv[2] # The company name the project belongs torepo=sys.argv[3] # The project to analysedirectory='' # Where to make the graphif len(sys.argv)==5:	directory=sys.argv[4]file=''user=''p=getpass.getpass()UnknownUser_id=1 #Will be used to identify a Unknown user# simple wrapper function to encode the username & passdef encodeUserData(user, password):  return "Basic " + (user + ":" + password).encode("base64").rstrip()# simple function to make the url request to github and parse the result in Jsondef sendRequest(url):    data=[]    req = urllib2.Request(url)    req.add_header('Accept', 'application/json')    req.add_header("Content-type", "application/x-www-form-urlencoded")    req.add_header('Authorization', encodeUserData(u, p))    # make the request and print the results    try:        res = urllib2.urlopen(req)        return json.loads(res.read())    except urllib2.HTTPError, e:        print "\n----Error----\n"+e.fp.read()+"\n-------------\n"        quit()    # print res.read()    # parse the result in json format    ################################## To get the repository content ##################################def getContent(directory):    print "[*]Getting project content..."    url='https://api.github.com/repos/'+org+'/'+repo+'/contents/'+directory+"/"    data = sendRequest(url)    content={}    # get the number of elements in the repository and print it    for file in data:        content[file['name']] = {'name':file['name'],'size':file['size'],'type':file['type']}    print "[Done]"    return content####################################### To get all the contributors of a   ## file and their number of commits   ######################################## Python Github APIfrom pygithub3 import Githubgh = Github(login=u, password=p)def commitersOfFile(contributorsList,repo,file):    # This URL shows what iformation can be get about commits (email addresses, etc...)    # curl -i -u AlexFabre https://api.github.com/repos/twbs/grunt-bootlint/commits/ae31bb28f74b306437ca6cb34662935c3910434e    fileContributors={} # The Commiters of the file    print file, # the file we are going to list the commits    # Let's get the entire commit's hirstory of the file    commitList=gh.repos.commits.list(user=org, repo=repo, path=file).all()    num_commit=len(commitList)    print str(num_commit)+' commits' # The length of the list id: number of commits    for commit in commitList:    	# # Let's get all the infos aboout a commit     #    url='https://api.github.com/repos/'+org+'/'+repo+'/commits/'+str(commit)[12:-2]     #    data = sendRequest(url)        # We get all infos about the committer who approved the commit        committer_name=commit.commit.committer.name # His real name, not a login        committer_email=commit.commit.committer.email        committer_message=commit.commit.message        commit_date=commit.commit.committer.date # Date of this commit        commit_sha=commit.sha # The id of the commit        	# We get everything about the author of the modifications        try:            contributor_login=commit.author.login # login according to Github            contributor_id=commit.author.id # Github unique id            contributor_url=commit.author.url # Link to the github profile        except:        	# If the author is not known, it happens in project bootstrap-blog i think, then it creats an Unknown author with a negative id	        contributor_login='UnknownAuthor'+str(UnknownUser_id)	        contributor_id=0-UnknownUser_id #Declared at the begining	        contributor_url='No url'        if contributorsList.has_key(contributor_login.encode('ascii', 'replace')): # The contributors has allready touched this file            contributorsList[contributor_login]['commits']+=1            contributorsList[contributor_login]['name']=committer_name.encode('ascii', 'replace')            contributorsList[contributor_login]['committers'][committer_name.encode('ascii', 'replace')]={'name': committer_name.encode('ascii', 'replace'), 'email':committer_email.encode('ascii', 'replace'), 'message':committer_message.encode('ascii', 'replace'), 'date':commit_date, 'sha': commit_sha}        else:            print "    new contributor : ",contributor_login # The contributor has never touched this file yet            contributorsList[contributor_login]={'num':0 ,'login': contributor_login.encode('ascii', 'replace'), 'id': contributor_id, 'commits': 1, 'name':committer_name.encode('ascii', 'replace'), 'committers':{}}            contributorsList[contributor_login.encode('ascii', 'replace')]['committers'][committer_name.encode('ascii', 'replace')]={'name': committer_name.encode('ascii', 'replace'), 'email':committer_email.encode('ascii', 'replace'), 'message':committer_message.encode('ascii', 'replace'), 'date':commit_date, 'sha': commit_sha}        if fileContributors.has_key(contributor_login):            fileContributors[contributor_login]+=1        else:            fileContributors[contributor_login]=1    return num_commit, contributorsList, fileContributors####################################### To get all the contributors of all ## files and their number of commits  #######################################def commitersOfDirectory(contributorsList,repo,content):    print "[*]Getting the commiters..."    fileList={}    for file in content:        fileList[content[file]['name']]={'name':content[file]['name'],'type':content[file]['type'],'size':content[file]['size'],'num':0}        fileList[content[file]['name']]['commits'], contributorsList, fileList[content[file]['name']]['committers']=(commitersOfFile(contributorsList,repo,content[file]['name']))    print "[Done]", str(len(contributorsList))+' contributors'    return fileList, contributorsList        print "----Collecting data: /"+org+'/'+repo+"/"+directory+" ----"content = getContent(directory)contributorsList={}commitsPerFile, contributersList = commitersOfDirectory(contributorsList,repo,content)# Giving a single number for the graph drawing to each node according to python's order of dictionarynodesNumber=0cpt=0 # To attribute each node a unique number for the links of the graphprint "----Making json file: /"+org+'-'+repo+".json ----"print "[files]",json = open(org+'-'+repo+".json", "wb+")json.write( '{"nodes":[');for file in commitsPerFile:    commitsPerFile[file]['num']=cpt    if commitsPerFile[file]['commits']>max_file_commit:    	max_file_commit=commitsPerFile[file]['commits']    cpt+=1    json.write('{"name":"'+commitsPerFile[file]['name']+'","type":"'+commitsPerFile[file]['type']+'","num":"'+str(commitsPerFile[file]['num'])+'","size":"'+str(commitsPerFile[file]['size'])+'","commits":"'+str(commitsPerFile[file]['commits'])+'","group":1},')print " ok"print "[contributors]",cemaphore=Truefor contributor in contributersList:    contributersList[contributor]['num']=cpt    if contributersList[contributor]['commits']>max_user_commit:    	max_user_commit=contributersList[contributor]['commits']    cpt+=1    if cemaphore:        json.write('{"login":"'+contributersList[contributor]['login']+'","num":"'+str(contributersList[contributor]['num'])+'","commits":"'+str(contributersList[contributor]['commits'])+'","name":"'+contributersList[contributor]['name']+'","type":"user","id":"'+str(contributersList[contributor]['id'])+'","group":'+str((contributersList[contributor]['commits']/20)+4)+'}')        cemaphore=False    else:        json.write(',{"login":"'+contributersList[contributor]['login']+'","num":"'+str(contributersList[contributor]['num'])+'","commits":"'+str(contributersList[contributor]['commits'])+'","name":"'+contributersList[contributor]['name']+'","type":"user","id":"'+str(contributersList[contributor]['id'])+'","group":'+str((contributersList[contributor]['commits']/20)+4)+'}')              print " ok"print "[links]",json.write('],"links":[')cemaphore=Truefor file in commitsPerFile:    for committer in commitsPerFile[file]['committers']:        if cemaphore:            json.write('{"source":'+str(contributersList[committer]['num'])+',"target":'+str(commitsPerFile[file]['num'])+',"value":'+str(commitsPerFile[file]['committers'][committer])+'}')            cemaphore=False        else:            json.write(',{"source":'+str(contributersList[committer]['num'])+',"target":'+str(commitsPerFile[file]['num'])+',"value":'+str(commitsPerFile[file]['committers'][committer])+'}')json.write(']}')print " ok"json.close()print "[Finished]"import igraph as igimport jsonimport urllib2data = []# req = urllib2.Request("https://raw.githubusercontent.com/plotly/datasets/master/miserables.json")# opener = urllib2.build_opener()# f = opener.open(req)f = open(org+"-"+repo+".json", "rb")data = json.loads(f.read())N=len(data['nodes'])L=len(data['links'])Edges=[(data['links'][k]['source'], data['links'][k]['target']) for k in range(L)]G=ig.Graph(Edges, directed=False)print '----Graph:----\n',G################################################### All the graph documentation on plotly web page ## https://plot.ly/python/3d-network-graph/       ###################################################labels_file=[]group_file=[]commits_file=[]labels_user=[]group_user=[]commits_user=[]nu=0nf=0for node in data['nodes']:    if node['type']=='user':    	labels_user.append(node['login']+" ("+node['id']+") : "+node['commits']+" commits")    	nu+=1    	group_user.append(node['group'])    	commits_user.append((int(node['commits'])*80/max_user_commit)+8)    else:    	labels_file.append(node['name']+" ("+node['type']+" ) : "+node['commits']+" commits")    	nf+=1    	group_file.append(node['group'])    	commits_file.append((int(node['commits'])*50/max_file_commit)+8)layt=G.layout('kk', dim=3) Xnf=[layt[k][0] for k in range(nf)]# x-coordinates of nodesYnf=[layt[k][1] for k in range(nf)]# y-coordinatesZnf=[layt[k][2] for k in range(nf)]# z-coordinatesXnu=[layt[nf+k][0] for k in range(nu)]# x-coordinates of nodesYnu=[layt[nf+k][1] for k in range(nu)]# y-coordinatesZnu=[layt[nf+k][2] for k in range(nu)]# z-coordinatesXe=[]Ye=[]Ze=[]for e in Edges:    Xe+=[layt[e[0]][0],layt[e[1]][0], None]# x-coordinates of edge ends    Ye+=[layt[e[0]][1],layt[e[1]][1], None]      Ze+=[layt[e[0]][2],layt[e[1]][2], None] import plotly.plotly as pyfrom plotly.graph_objs import *import plotlytrace1=Scatter3d(x=Xe,               y=Ye,               z=Ze,               mode='lines',               name='Links',               line=Line(color='rgb(185,185,185)', width=0.8),               hoverinfo='none'               )trace2=Scatter3d(x=Xnu,               y=Ynu,               z=Znu,                 mode='markers',               name='Contributors',               marker=Marker(symbol='dot',                             size=commits_user,                              color=group_user,                              colorscale='Viridis',                             line=Line(color='rgb(50,50,50)', width=0.5)                             ),               text=labels_user,               hoverinfo='text'               )trace3=Scatter3d(x=Xnf,               y=Ynf,               z=Znf,                 mode='markers',               name='Files',               marker=Marker(symbol='square',                             size=commits_file,                              color=group_file,                              colorscale='Viridis',                             line=Line(color='rgb(50,50,50)', width=0.5)                             ),               text=labels_file,               hoverinfo='text'               )axis=dict(showbackground=False,          showline=False,            zeroline=False,          showgrid=False,          showticklabels=False,          title=''           )execution_time = time.time() - t0layout = Layout(         title="Network of contributors (committers) in "+org+"'s project /"+repo+"/"+directory+" (generated in "+str(execution_time)+" sec)",          width=900,         height=900,         showlegend=True,         scene=Scene(           xaxis=XAxis(axis),         yaxis=YAxis(axis),          zaxis=ZAxis(axis),         ),     margin=Margin(        t=100    ),    hovermode='closest',    annotations=Annotations([           Annotation(           showarrow=False,             text="Data source: <a href='https://github.com/"+org+"/"+repo+"'>[1]</a>",            xref='paper',                 yref='paper',                 x=0,              y=0.1,              xanchor='left',               yanchor='bottom',              font=Font(            size=14             )                 )        ]),    )data=Data([trace1, trace2, trace3])fig=Figure(data=data, layout=layout)plotly.offline.plot(fig, filename=org+"-"+repo+".html")print execution_time